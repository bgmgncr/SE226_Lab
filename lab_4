#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
};

class Stack {
private:
    Node* head;  // Points to top element of stack.
    int num;     // Number of elements (index-style tracking).
    int capacity; // Fixed size limit (resized when full).

public:
    Stack(int initialCapacity) {
        head = nullptr;
        num = -1;
        capacity = initialCapacity;
    }

    void push(int x) {
        Node* temp = new Node();
        temp->data = x;
        temp->next = head;
        head = temp;
        num++;
        cout <<head-> data << endl;
    }

    int pop() {
        if (isEmpty()) {
            return -1;
        }
        Node* temp = head;
        int pvalue = temp->data;
        head = head->next;
        delete temp;
        num--;
        cout << "popped element is: " << pvalue << endl;
        return pvalue;
    }

    int peek() {
        if (isEmpty()) {
            return -1;
        }
        cout << "peeked element is: " << head->data << endl;
    }

    bool isEmpty() {
        return num < 0;
    }

    bool deleteElement(int val) {
        if (isEmpty()) {
            return false;
        }
        Node* temp = head;
        Node* prev = nullptr;
        while (temp != nullptr && temp->data != val) {
            prev = temp;
            temp = temp->next;
        }
        if (temp == nullptr) {
            return false;
        }
        if (prev == nullptr) {
            head = temp->next;
        } else {
            prev->next = temp->next;
        }
        delete temp;
        num--;
        cout<<"Element deleted is: " << val << endl;
    }
};

int main() {
    Stack myStack(15);
    myStack.isEmpty();
    myStack.push(10);
    myStack.push(8);
    myStack.push(4);
    myStack.push(6);
    myStack.peek();
    myStack.push(9);
    myStack.pop();
    return 0;
}
